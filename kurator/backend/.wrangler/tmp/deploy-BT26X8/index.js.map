{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "C:\\Users\\david\\Documents\\pyhon\\ugabug\\kurator\\backend\\.wrangler\\tmp\\deploy-BT26X8",
  "sourcesContent": ["export default {\r\n  async fetch(req, env) {\r\n    const url = new URL(req.url);\r\n    if (req.method === \"OPTIONS\") return new Response(null, { headers: cors(req) });\r\n\r\n    if (url.pathname === \"/analyze\" && req.method === \"POST\") {\r\n      try {\r\n        const body = await req.json(); // { token, playlistId, criteria, createNew, llmLimit }\r\n        const tracks = await getPlaylistTracks(body.token, body.playlistId);\r\n        const analysis = await analyzeWithOpenAI(env, tracks, body.criteria, body.llmLimit || 300);\r\n\r\n        let newPlaylist = null;\r\n        if (body.createNew) {\r\n          newPlaylist = await createPlaylistAndAdd(\r\n            body.token,\r\n            analysis.suggestions.map(s => s.uri),\r\n            analysis.title || \"Kuraterad spellista\",\r\n            analysis.description || \"Skapad av TrackCurator\"\r\n          );\r\n        }\r\n\r\n        return json({ ok: true, analysis, newPlaylist }, 200, cors(req));\r\n      } catch (e) {\r\n        return json({ ok: false, error: e.message || \"Analyze failed\" }, 500, cors(req));\r\n      }\r\n    }\r\n\r\n    if (url.pathname === \"/batch\" && req.method === \"POST\") {\r\n      return json({ ok: true, storedChunks: 1 }, 200, cors(req));\r\n    }\r\n\r\n    return json({ ok: false, error: \"Not found\" }, 404, cors(req));\r\n  }\r\n};\r\n\r\nconst ALLOWED = new Set([\r\n  \"https://trackcurator.org\",\r\n  \"https://kurator-ui.pages.dev\"\r\n]);\r\n\r\nfunction cors(req) {\r\n  const o = req.headers.get(\"Origin\");\r\n  const allow = ALLOWED.has(o) ? o : \"\";\r\n  return {\r\n    \"Access-Control-Allow-Origin\": allow || \"*\",\r\n    \"Access-Control-Allow-Methods\": \"GET,POST,OPTIONS\",\r\n    \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\r\n  };\r\n}\r\nfunction json(d, s = 200, h = {}) {\r\n  return new Response(JSON.stringify(d), { status: s, headers: { \"Content-Type\": \"application/json\", ...h } });\r\n}\r\n\r\n// ---- Spotify + OpenAI helpers ----\r\nasync function getPlaylistTracks(accessToken, playlistId) {\r\n  let url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks?limit=100`;\r\n  const out = [];\r\n  while (url) {\r\n    const r = await fetch(url, { headers: { Authorization: `Bearer ${accessToken}` } });\r\n    if (!r.ok) throw new Error(`Spotify tracks ${r.status}`);\r\n    const j = await r.json();\r\n    for (const it of j.items || []) {\r\n      const tr = it.track;\r\n      if (tr) out.push({\r\n        id: tr.id, uri: tr.uri, name: tr.name,\r\n        artists: tr.artists?.map(a => a.name).join(\", \"),\r\n        duration_ms: tr.duration_ms\r\n      });\r\n    }\r\n    url = j.next;\r\n  }\r\n  return out;\r\n}\r\n\r\nasync function analyzeWithOpenAI(env, tracks, criteria, llmLimit) {\r\n  const sys = `Du \u00E4r en spellistekurator. Returnera JSON med:\r\n  title, description, cards[ {title,emoji,body,why_it_matters} ], suggestions[ {uri} ]`;\r\n\r\n  const user = { criteria, sample: tracks.slice(0, 80).map(t => ({ name: t.name, artists: t.artists })) };\r\n\r\n  const r = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${env.OPENAI_API_KEY}`\r\n    },\r\n    body: JSON.stringify({\r\n      model: \"gpt-4o-mini\",\r\n      temperature: 0.7,\r\n      response_format: { type: \"json_object\" },\r\n      messages: [\r\n        { role: \"system\", content: sys },\r\n        { role: \"user\", content: JSON.stringify(user) }\r\n      ]\r\n    })\r\n  });\r\n  if (!r.ok) throw new Error(`OpenAI ${r.status}`);\r\n  const j = await r.json();\r\n  const content = j.choices?.[0]?.message?.content || \"{}\";\r\n  const out = JSON.parse(content);\r\n  return {\r\n    title: out.title || \"Kuraterad spellista\",\r\n    description: out.description || \"\",\r\n    cards: out.cards || [],\r\n    suggestions: (out.suggestions || []).map(s => (typeof s === \"string\" ? { uri: s } : s)).slice(0, llmLimit)\r\n  };\r\n}\r\n\r\nasync function createPlaylistAndAdd(accessToken, uris, title, description) {\r\n  const meR = await fetch(\"https://api.spotify.com/v1/me\", {\r\n    headers: { Authorization: `Bearer ${accessToken}` }\r\n  });\r\n  if (!meR.ok) throw new Error(`Spotify me ${meR.status}`);\r\n  const me = await meR.json();\r\n\r\n  const createR = await fetch(`https://api.spotify.com/v1/users/${me.id}/playlists`, {\r\n    method: \"POST\",\r\n    headers: { Authorization: `Bearer ${accessToken}`, \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ name: title, description, public: false })\r\n  });\r\n  if (!createR.ok) throw new Error(`Spotify create ${createR.status}`);\r\n  const playlist = await createR.json();\r\n\r\n  for (let i = 0; i < uris.length; i += 100) {\r\n    const chunk = uris.slice(i, i + 100);\r\n    const addR = await fetch(`https://api.spotify.com/v1/playlists/${playlist.id}/tracks`, {\r\n      method: \"POST\",\r\n      headers: { Authorization: `Bearer ${accessToken}`, \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ uris: chunk })\r\n    });\r\n    if (!addR.ok) throw new Error(`Spotify add ${addR.status}`);\r\n  }\r\n  return playlist;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
